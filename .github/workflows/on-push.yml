name: Build on push

permissions:
  packages: write

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, beta, nightly]

    steps:
      - name: Checkout project
        uses: actions/checkout@v3
      
      - name: Install latest Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.toolchain }}
            override: true
            components: rustfmt, clippy

      - name: Run tests
        run: cargo test

  coverage:
    name: Upload coverage
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout project
        uses: actions/checkout@v3
      
      - name: Install latest Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy

      - name: Install llvm
        run: sudo apt update && sudo apt install -y llvm 

      - name: Generate coverage data
        run: |
          RUSTFLAGS="-C instrument-coverage" cargo build --bin app-cli --all-features
          target/debug/app-cli help
          llvm-profdata merge -sparse default.profraw -o app_cli.profdata
          llvm-cov show target/debug/app-cli -instr-profile=app_cli.profdata > coverage.txt

      - uses: codecov/codecov-action@v3
        with:
          files: coverage.txt

  build-amd64:
    name: Build image (AMD64)
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Set env variables
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')" >> $GITHUB_ENV
          IMAGE_NAME="${GITHUB_REPOSITORY#*/}"
          echo "IMAGE_NAME=${IMAGE_NAME//docker-/}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker buildx action
        uses: docker/setup-buildx-action@v2

      - name: Run Docker buildx
        run: |
                docker buildx build \
                --platform linux/amd64 \
                --tag ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$BRANCH-amd64 \
                --output "type=registry" ./
  build-arm64:
    name: Build image (ARM64)
    runs-on: self-hosted

    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Set env variables
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')" >> $GITHUB_ENV
          IMAGE_NAME="${GITHUB_REPOSITORY#*/}"
          echo "IMAGE_NAME=${IMAGE_NAME//docker-/}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Run Docker buildx
        run: |
                docker buildx build \
                --platform linux/arm64 \
                --network host \
                --tag ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$BRANCH-arm64 \
                --output "type=registry" ./

  create-manifest:
    name: Create two-architecture manifest
    runs-on: ubuntu-22.04
    needs:
      - build-amd64
      - build-arm64
      # Don't push broken builds
      - test

    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Set env variables
        run: |
          echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')" >> $GITHUB_ENV
          IMAGE_NAME="${GITHUB_REPOSITORY#*/}"
          echo "IMAGE_NAME=${IMAGE_NAME//docker-/}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create final manifest
        run: ./create-manifest.sh "ghcr.io/${{ github.repository_owner }}/${IMAGE_NAME}" "${BRANCH}"
